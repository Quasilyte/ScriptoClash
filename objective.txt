((1)) Execute shell command 'date +%s%N > buf/ts1 2>&1'.

((2)) Read contents of input files into array of 2 elements, thats it,
each of two element contain another array inside. Separate elements from
files by newline.

Something like:

[array]{
  [0] => [array]{
    [0] => 'Lorem',
    [1] => 'ipsum',
    ...
    [68] => 'laborum'
  },
  [1] => [array]{
    [0] => 245,
    [1] => 23,
    ...
    [69] => 500
  }
}

((3)) Scan the array of words for the longest and shortest words.
You need only find the number values.
The longest there is - 13, the shortest is 2.

((4)) Create a string from concatenations of all words from array[0]
which starts with a || b || c || d || e.
After each word (even after the last one) you must put an underscore (_);

We are not done with the spell yet.
Count it's vowel letters (vowels are: a, e, i, o, u).

((5)) Splice second sub array into 2 chunks of 35 elements.
Let's call those 2 arrays as slices.
Perform a square root taking on every pair sum of both slices.

E.g.:

cycle for every element with 'i' index {
  result[i] = sqrt ( slice1[i] * slice2[i] )
}

((6)) Calculate a sum of all resultive elements.

So:

foreach result as num {
  sum += num
}

((7)) Implement recursive ackermann function.
https://en.wikipedia.org/wiki/Ackermann_function

Remember: recursion is obligatory!

((8)) Execute shell command 'date +%s%N > buf/ts2 2>&1'.
Now, read both output files contents and store them in variables.
After that, evaluate program runtime.
Divide result by 100 thousands to make it look pretty.

In other words:

timestamp1 := (int) file_contents('buf/ts1.txt')
timestamp2 := (int) file_contents('buf/ts2.txt')
runtime := (timestamp2 - timestamp2) / 100000

((9)) Everything is nearly done.
Print tho the screen:
  - array[0] max and min word lengths
  - length of the 'spell' and it's checksum (vowel count).
  - sum founded at pt.6
  - levenstein distance
